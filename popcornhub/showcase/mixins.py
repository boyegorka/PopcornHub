from django.core.cache import cache
from termcolor import colored


class CacheMixin:
    def get_cache_key(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–ª—é—á–∞ –∫–µ—à–∞"""
        return f'{self.__class__.__name__}_{self.request.query_params.urlencode()}'

    def get_cached_queryset(self, queryset):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–µ—à–∞"""
        cache_key = self.get_cache_key()
        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ –∫–µ—à–∞
        cached_result = cache.get(cache_key)
        if cached_result is not None:
            message = colored('‚ú® –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ –ö–ï–®–ê Redis', 'green', attrs=['bold'])
            print('\n' + '=' * 50)
            print(message)
            print(f'Cache key: {cache_key}')
            print('=' * 50 + '\n')
            return cached_result

        # –ï—Å–ª–∏ –≤ –∫–µ—à–µ –Ω–µ—Ç, –ø—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        message = colored('üîÑ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –ë–ê–ó–´ –î–ê–ù–ù–´–•', 'yellow', attrs=['bold'])
        print('\n' + '=' * 50)
        print(message)
        print(f'Cache key: {cache_key}')
        print('=' * 50 + '\n')
        # –ö–µ—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ 1 —á–∞—Å
        cache.set(cache_key, queryset, timeout=3600)
        return queryset
